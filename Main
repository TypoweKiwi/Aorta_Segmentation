{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11209360,"sourceType":"datasetVersion","datasetId":6999385}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport os\n\n\nfrom sklearn.model_selection import train_test_split\nimport SimpleITK as sitk\n\nimport torch as tc\nimport torch.nn as nn\nfrom torchvision import models","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-29T19:53:56.067674Z","iopub.execute_input":"2025-03-29T19:53:56.068018Z","iopub.status.idle":"2025-03-29T19:53:56.830159Z","shell.execute_reply.started":"2025-03-29T19:53:56.067993Z","shell.execute_reply":"2025-03-29T19:53:56.828892Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"def split_data(names_list, pre_test_size = 0.2, val_size = 0.5, seed=5):\n    train_names, pre_test_names = train_test_split(names_list, test_size = pre_test_size, random_state = seed)\n    val_names, test_names = train_test_split(pre_test_names, test_size = val_size, random_state = seed)\n    return train_names, val_names, test_names\n\ndata_path = r\"/kaggle/input/mri-data/Data\"\n\nDongyang_data_names = [os.path.join(\"Dongyang\", object) for object in os.listdir(os.path.join(Data_path, \"Dongyang\"))]\nKiTS_data_names = [os.path.join(\"KiTS\", object) for object in os.listdir(os.path.join(Data_path, \"KiTS\"))]\nRider_data_names = [os.path.join(\"Rider\", object) for object in os.listdir(os.path.join(Data_path, \"Rider\"))]\n\nD_train_names, D_val_names, D_test_names = split_data(Dongyang_data_names)\nK_train_names, K_val_names, K_test_names = split_data(KiTS_data_names)\nR_train_names, R_val_names, R_test_names = split_data(Rider_data_names)\n\ntrain_data_names = D_train_names + K_train_names + R_train_names\nval_data_names = D_val_names + K_val_names + R_val_names\ntest_data_names = D_test_names + K_test_names + R_test_names","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-29T20:03:53.728109Z","iopub.execute_input":"2025-03-29T20:03:53.728671Z","iopub.status.idle":"2025-03-29T20:03:53.747498Z","shell.execute_reply.started":"2025-03-29T20:03:53.728624Z","shell.execute_reply":"2025-03-29T20:03:53.745830Z"}},"outputs":[{"name":"stdout","text":"['Dongyang/D1', 'Dongyang/D5', 'KiTS/K16', 'KiTS/K5', 'Rider/R5 (AD)', 'Rider/R4']\n","output_type":"stream"}],"execution_count":43},{"cell_type":"code","source":"class Dataset(tc.utils.data.Dataset):\n    def __init__(self, data_path):\n        self.data_path = data_path\n        self.images = []\n        self.masks = []\n        self.images_names = []\n        ","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}